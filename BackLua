local bk = {}

function bk.New(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

function bk.Tween(object, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration, easingStyle or Enum.EasingStyle.Linear, easingDirection or Enum.EasingDirection.Out)
    local tween = game:GetService("TweenService"):Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

bk.Wait = task.wait
bk.Spawn = task.spawn

function bk.Debounce(func, delay)
    local lastCall = 0
    return function(...)
        local now = tick()
        if now - lastCall >= (delay or 0.2) then
            lastCall = now
            func(...)
        end
    end
end

function bk.Connect(event, func)
    return event:Connect(func)
end

function bk.Part(size, position, color, parent)
    return bk.New("Part", {
        Size = size,
        Position = position,
        Anchored = true,
        CanCollide = true,
        Color = color,
        Parent = parent
    })
end

function bk.Gui(name, parent)
    return bk.New("ScreenGui", { Name = name, Parent = parent })
end

function bk.Rand(min, max)
    return math.random(min, max)
end

function bk.Round(number, decimalPlaces)
    local multiplier = 10 ^ (decimalPlaces or 0)
    return math.floor(number * multiplier + 0.5) / multiplier
end

function bk.Map(value, start1, stop1, start2, stop2)
    return start2 + (value - start1) * (stop2 - start2) / (stop1 - start1)
end

function bk.AddFunc(name, func)
    if type(func) == "function" then
        bk[name] = func
    end
end

function bk.SaveFunc(name, func)
    bk.AddFunc(name, func)
end

function bk.LoadFunc(name)
    return bk[name]
end

function bk.RemoveFunc(name)
    bk[name] = nil
end

function bk.ListFuncs()
    for name, func in pairs(bk) do
        if type(func) == "function" then
            print(name)
        end
    end
end

function bk.TextLabel(text, size, position, parent)
    return bk.New("TextLabel", {
        Text = text,
        Size = size,
        Position = position,
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        Parent = parent
    })
end

function bk.Frame(size, position, color, parent)
    return bk.New("Frame", {
        Size = size,
        Position = position,
        BackgroundColor3 = color,
        Parent = parent
    })
end

function bk.Button(text, size, position, color, parent, onClick)
    local button = bk.New("TextButton", {
        Text = text,
        Size = size,
        Position = position,
        BackgroundColor3 = color,
        Parent = parent
    })
    if onClick then
        button.MouseButton1Click:Connect(onClick)
    end
    return button
end

function bk.Destroy(object)
    if object and object.Destroy then
        object:Destroy()
    end
end

function bk.Clone(object)
    if object and object.Clone then
        return object:Clone()
    end
end

function bk.SetProperties(object, properties)
    for property, value in pairs(properties) do
        object[property] = value
    end
end

function bk.GetChildren(parent, className)
    local children = {}
    for _, child in ipairs(parent:GetChildren()) do
        if not className or child:IsA(className) then
            table.insert(children, child)
        end
    end
    return children
end

function bk.ToggleVisibility(object)
    if object and object:IsA("GuiObject") then
        object.Visible = not object.Visible
    end
end

function bk.CreateFolder(name, parent)
    return bk.New("Folder", { Name = name, Parent = parent })
end

function bk.CreateSound(id, parent, volume, looped)
    return bk.New("Sound", {
        SoundId = "rbxassetid://" .. id,
        Parent = parent,
        Volume = volume or 1,
        Looped = looped or false
    })
end

function bk.PlaySound(sound)
    if sound and sound:IsA("Sound") then
        sound:Play()
    end
end

function bk.StopSound(sound)
    if sound and sound:IsA("Sound") then
        sound:Stop()
    end
end

return bk
